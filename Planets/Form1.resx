<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="planetcomponent1.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        /9j/4AAQSkZJRgABAQEAYABgAAD/4QAiRXhpZgAATU0AKgAAAAgAAQESAAMAAAABAAgAAAAAAAD/2wBD
        AAIBAQIBAQICAgICAgICAwUDAwMDAwYEBAMFBwYHBwcGBwcICQsJCAgKCAcHCg0KCgsMDAwMBwkODw0M
        DgsMDAz/2wBDAQICAgMDAwYDAwYMCAcIDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwM
        DAwMDAwMDAwMDAwMDAz/wAARCABkAGcDASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQF
        BgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAk
        M2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWG
        h4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx
        8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQA
        AQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5
        OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmq
        srO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD+
        f+iiigAoq5oHh+98U6zb6fp1rNeXt0+yKGJdzOf/AK3Uk8AAmvrv4A/8E23EFvqXiyGS+nbDCyjLC3i7
        /Mw5c/kvUfMOa7MHgK2Jly0l8+h5uZZvhsDDmry16Lqz5K8NeDdW8ZXfkaTpt7qEuQCLeFn259SOB+Ne
        haB+xp4816IOdOt7NT08+5XP5JuI/Gv0f8IfBzSfDFitnb6WtraxqPLgSBVVBntt24x7CuosvhJbmJbq
        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
</value>
  </data>
</root>